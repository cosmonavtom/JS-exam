document.addEventListener('DOMContentLoaded', () => {
    const taskInput = document.getElementById('task-input');
    const addTaskButton = document.getElementById('add-task');
    const taskList = document.getElementById('task-list');
    const filterTasks = document.getElementById('filter-tasks');
    const themeToggle = document.getElementById('theme-toggle');
    const modal = document.getElementById('modal');
    const editTaskInput = document.getElementById('edit-task-input');
    const saveTaskButton = document.getElementById('save-task');
    const closeModal = document.querySelector('.close');

    let tasks = [];
    let currentTaskId = null;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ localStorage
    loadTasks();

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    addTaskButton.addEventListener('click', () => {
        const taskText = taskInput.value.trim();
        if (taskText) {
            addTask(taskText);
            taskInput.value = '';
        } else {
            showToast('–ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
        }
    });

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    filterTasks.addEventListener('change', () => {
        filterTasksList(filterTasks.value);
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    themeToggle.addEventListener('click', () => {
        document.body.classList.toggle('dark-theme');
        const isDarkTheme = document.body.classList.contains('dark-theme');
        localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');
        themeToggle.textContent = isDarkTheme ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ üåù' : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞ üåö';
    });

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    taskList.addEventListener('click', (e) => {
        if (e.target.classList.contains('edit-task')) {
            currentTaskId = e.target.dataset.id;
            const task = tasks.find(task => task.id == currentTaskId);
            editTaskInput.value = task.text;
            modal.style.display = 'flex';
        }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏
    saveTaskButton.addEventListener('click', () => {
        const newText = editTaskInput.value.trim();
        if (newText) {
            updateTask(currentTaskId, newText);
            modal.style.display = 'none';
        } else {
            showToast('–ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal.addEventListener('click', () => {
        modal.style.display = 'none';
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ API
    loadTasksFromAPI();

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    function addTask(text) {
        const newTask = {
            id: Date.now(),
            text: text,
            completed: false,
            favorite: false
        };
        tasks.push(newTask);
        saveTasks();
        renderTasks();
        showToast('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    function updateTask(id, newText) {
        const task = tasks.find(task => task.id == id);
        task.text = newText;
        saveTasks();
        renderTasks();
        showToast('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    function deleteTask(id) {
        tasks = tasks.filter(task => task.id != id);
        saveTasks();
        renderTasks();
        showToast('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    function toggleTaskStatus(id) {
        const task = tasks.find(task => task.id == id);
        task.completed = !task.completed;
        saveTasks();
        renderTasks();
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è "–∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    function toggleFavorite(id) {
        const task = tasks.find(task => task.id == id);
        task.favorite = !task.favorite;
        saveTasks();
        renderTasks();
    }

    // –§–∏–ª—å—Ç—Ä –∑–∞–¥–∞—á
    function filterTasksList(filter) {
        let filteredTasks = [];
        switch (filter) {
            case 'completed':
                filteredTasks = tasks.filter(task => task.completed);
                break;
            case 'uncompleted':
                filteredTasks = tasks.filter(task => !task.completed);
                break;
            case 'favorite':
                filteredTasks = tasks.filter(task => task.favorite);
                break;
            default:
                filteredTasks = tasks;
        }
        renderTasks(filteredTasks);
    }

    // –†–µ–Ω–¥–µ—Ä –∑–∞–¥–∞—á
    function renderTasks(tasksToRender = tasks) {
        taskList.innerHTML = '';
        tasksToRender.forEach(task => {
            const li = document.createElement('li');
            li.innerHTML = `
                <span class="${task.completed ? 'completed' : ''}">${task.text}</span>
                <div>
                    <button class="edit-task" data-id="${task.id}">‚úèÔ∏è</button>
                    <button class="delete-task" data-id="${task.id}">üóëÔ∏è</button>
                    <button class="favorite-task" data-id="${task.id}">${task.favorite ? '‚≠ê' : '‚òÜ'}</button>
                    <input type="checkbox" class="task-status" data-id="${task.id}" ${task.completed ? 'checked' : ''}>
                </div>
            `;
            taskList.appendChild(li);
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.delete-task').forEach(button => {
            button.addEventListener('click', () => deleteTask(button.dataset.id));
        });

        document.querySelectorAll('.task-status').forEach(checkbox => {
            checkbox.addEventListener('change', () => toggleTaskStatus(checkbox.dataset.id));
        });

        document.querySelectorAll('.favorite-task').forEach(button => {
            button.addEventListener('click', () => toggleFavorite(button.dataset.id));
        });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –≤ JSON
    function saveTasks() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    // –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á
    function loadTasks() {
        const savedTasks = localStorage.getItem('tasks');
        if (savedTasks) {
            tasks = JSON.parse(savedTasks);
            renderTasks();
        }
    }

    function showToast(message) {
        // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;

        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.body.appendChild(toast);

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
        toast.style.position = 'fixed';
        toast.style.top = '20px'; // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        toast.style.left = '50%'; // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        toast.style.transform = 'translateX(-50%)'; // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        toast.style.padding = '10px 20px';
        toast.style.backgroundColor = '#989393';
        toast.style.color = '#111c01';
        toast.style.borderRadius = '5px';
        toast.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
        toast.style.zIndex = '1000'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        toast.style.transition = 'opacity 0.3s ease-in-out'; // –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setTimeout(() => {
            toast.style.opacity = '1';
        }, 10);

        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => toast.remove(), 300); // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        }, 3000);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å –≤–Ω–µ—à–Ω–µ–≥–æ API (JSONPlaceholder)
    function loadTasksFromAPI() {
        fetch('https://jsonplaceholder.typicode.com/todos')
            .then(response => response.json())
            .then(data => {
                tasks = data.map(task => ({
                    id: task.id,
                    text: task.title,
                    completed: task.completed,
                    favorite: false
                }));
                renderTasks();
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:', error));
    }
});